kind: Template
apiVersion: v1
metadata:
  name: ${APP_NAME}-template
labels:
  template: ${APP_NAME}-template
  app: ${APP_NAME}
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
      new-app-template: ${APP_NAME}-template
      template: ${APP_NAME}-template
    name: ${APP_NAME}
    namespace: ${PARAM_NAMESPACE}
  spec:
    lookupPolicy:
      local: false
###
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      template: ${APP_NAME}-template
      build: ${APP_NAME}
    name: ${APP_NAME}-s2i
    annotations:
      description: Define cómo construir la aplicación
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    source:
      type: Binary
    strategy:
      type: "Source"
      sourceStrategy:
        env:
        - name: JAVA_INITIAL_MEM_RATIO
          value: '100'
        - name: JAVA_MAX_MEM_RATIO
          value: '70'
        from:
          kind: "ImageStreamTag"
          namespace: openshift
          name: openjdk-11-rhel7:1.0
        scripts: http://ribera.claro.amx:8081/artifactory/local-openshift-release/scripts/s2i/openjdk18
    type: "Source"
    output:
      to:
        kind: "ImageStreamTag"
        name: ${APP_NAME}:latest      
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
      new-app-template: ${APP_NAME}-template
      template: ${APP_NAME}-template
    name: ${APP_NAME}
    namespace: ${PARAM_NAMESPACE}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
      template: ${APP_NAME}-template
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
          template: ${APP_NAME}-template
      spec:
        containers:
        - env:
          - name: TZ
            value: ${TZ}
          image: docker-registry.default.svc:5000/${PARAM_NAMESPACE}/${APP_NAME}:${PARAM_DC_TAG}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /manage/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          name: ${APP_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /manage/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: false
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:${PARAM_DC_TAG}
          namespace: ${PARAM_NAMESPACE}
      type: ImageChange
####
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
      new-app-template: ${APP_NAME}-template
      template: ${APP_NAME}-template
    name: ${APP_NAME}
    namespace: ${PARAM_NAMESPACE}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: 8778-tcp
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      deploymentconfig: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
      new-app-template: ${APP_NAME}-template
      template: ${APP_NAME}-template
    name: ${APP_NAME}
    namespace: ${PARAM_NAMESPACE}
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
      new-app-template: ${APP_NAME}-template
      template: ${APP_NAME}-template
    name: ${APP_NAME}-manage
    namespace: ${PARAM_NAMESPACE}
  spec:
    path: /manage
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    wildcardPolicy: None
parameters:
- name: PARAM_NAMESPACE
  displayname: Project Name (Namespace)
  required: true
  description: Nombre del proyecto (Namespace)
- name: APP_NAME
  displayname: Application Name
  description: Name of the application to be created
- name: PARAM_DC_TAG
  displayname: Tag a la imagen a usar
  value: latest
  description: tag usado para identificar la imagen a usar, latest en Desa, RC Version en Testing y Version en Prod
- name: TZ
  displayname: Timezone
  required: true
  description: Timezone a utilizar al momento del deploy
